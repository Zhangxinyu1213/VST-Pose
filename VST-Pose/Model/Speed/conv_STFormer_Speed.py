

import torch
import torch.nn as nn
import torch.nn.functional as F
import math
import warnings
##################################### key block ############################################

#######################  Drop_Path##############################
def drop_path(x, drop_prob: float = 0., training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.
    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output
class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

#############################  MLP ##############################
class MLP(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.1):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

##########################  MultiheadAttention #########################
class Attention_temporal(nn.Module):
    def __init__(self, d_model, nhead,drop=0.1):
        super(Attention_temporal, self).__init__()
        self.self_attn = nn.MultiheadAttention(d_model, nhead, dropout=drop,batch_first=True)
    def forward(self, x):  #x:(b,t,c,f) d_model=f
        b,t,c,f=x.shape
        src = x.view(b, t, -1)
        src2, attn_weights = self.self_attn(src, src, src, need_weights=True)
        x = src2.view(b, t, c, f)
        return x

class Attention_spatial(nn.Module):
    def __init__(self, d_model, nhead,drop=0.1):
        super(Attention_spatial, self).__init__()
        self.self_attn = nn.MultiheadAttention(d_model, nhead,dropout=drop, batch_first=True)
    def forward(self, x):  #x:(b,t,c,f)  d_model=c*f
        b,t,c,f=x.shape
        src = x.view(b * t, c,f)
        src2, attn_weights = self.self_attn(src, src, src, need_weights=True)
        x = src2.view(b, t, c, f)
        return x

################################## T S former #####################
#假设输入block的 数据是 (b,t,c,f)，c=17，f=256
class Former(nn.Module):
    def __init__(self,mode,Thead=4,Shead=4,c=17,dim=256,mlp_ratio=4 ,drop=0.1,drop_path=0.):  #assume channel num equal joints note num
        super(Former, self).__init__()
        self.mode=mode
        self.norm1_s = nn.LayerNorm(dim)
        self.norm1_t = nn.LayerNorm(dim)
        self.temporal_attn = Attention_temporal(c*dim, Thead,drop=drop)  #  d_model=
        self.spatial_attn=Attention_spatial(dim, Shead,drop=drop )   #d_model=dim
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2_s = nn.LayerNorm(dim)
        self.norm2_t = nn.LayerNorm(dim)
        self.mlp_hidden_dim=dim*mlp_ratio
        self.mlp_out_dim=dim*1
        self.act_layer=nn.GELU
        self.mlp_s = MLP(in_features=dim, hidden_features=self.mlp_hidden_dim, out_features=self.mlp_out_dim, act_layer= self.act_layer,
                        drop=drop)
        self.mlp_t = MLP(in_features=dim, hidden_features=self.mlp_hidden_dim, out_features=self.mlp_out_dim, act_layer= self.act_layer,
                         drop=drop)
        self.attn_weights = None

    def forward(self, x):
        #src:(b, t, c, f)
        b, t, c, f = x.shape
        if self.mode =="stage_st":
            x = x + self.drop_path(self.spatial_attn(self.norm1_s(x)))  #  空 atten_time:(b, t, c, f
            x = x + self.drop_path(self.mlp_s(self.norm2_s(x)))
            mid_result=x
            x = x + self.drop_path(self.temporal_attn(self.norm1_t(x)))  # 时 atten_time:(b, t, c, f)
            x = x + self.drop_path(self.mlp_t(self.norm2_t(x)))
        elif self.mode =="stage_ts":
            x = x + self.drop_path(self.temporal_attn(self.norm1_t(x)))  #residual
            x = x + self.drop_path(self.mlp_t(self.norm2_t(x)))
            mid_result = x
            x = x + self.drop_path(self.spatial_attn(self.norm1_s(x)))  #residual
            x = x + self.drop_path(self.mlp_s(self.norm2_s(x)))

        return x,mid_result

######################################  2. Time ##############################################
class TSBlock(nn.Module):
    """时序 Transformer 进行 CSI 建模"""

    def __init__(self, Thead=4, Shead=4, channel=17, dim=256, mlp_ratio=0.4, drop=0.1, drop_path=0., att_fuse=True):
        super(TSBlock, self).__init__()
        ##TFormer 是 t,c*f ,head可以大一点，   #SFormer是 c，f，head可以小一点
        self.TSFormer = Former(mode='stage_ts',Thead=Thead,Shead=Shead,  c=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
                               drop_path=drop_path)
        self.ST_Former = Former(mode='stage_st',Thead=Thead,Shead=Shead,  c=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
                                drop_path=drop_path)
        self.att_fuse = att_fuse  # 是否使用注意力融合
        if self.att_fuse:
            self.ts_attn = nn.Linear(dim * 2, 2)  # 融合时空信息的权重计算
    def forward(self, x):
        x_ts,ts_mid_feature = self.TSFormer(x)  # (b,t,c,f) 时序建模
        x_st,_= self.ST_Former(x)  # (b,t,c,f) 空间建模
        if self.att_fuse:
            alpha = torch.cat([x_st, x_ts], dim=-1)  # (b, t, c, f*2)
            alpha = self.ts_attn(alpha)  # 计算权重 (b, t, c, 2)
            alpha = alpha.softmax(dim=-1)  # 归一化
            # 按照权重加权融合
            x = x_st * alpha[..., 0:1] + x_ts * alpha[..., 1:2]
        else:
            x = (x_st + x_ts) * 0.5  # 直接平均融合
        return x,ts_mid_feature

class Speedformer(nn.Module):
    def __init__(self,Thead=4,Shead=4,c=17,dim=256,mlp_ratio=4 ,drop=0.1,drop_path=0.):  #assume channel num equal joints note num
        super(Speedformer, self).__init__()
        self.norm1_t = nn.LayerNorm(dim)
        self.temporal_attn = Attention_temporal(c*dim, Thead,drop=drop)  #  d_model=
        #self.spatial_attn=Attention_spatial(dim, Shead,drop=drop )   #d_model=dim
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        #self.norm2_s = nn.LayerNorm(dim)
        self.norm2_t = nn.LayerNorm(dim)
        self.mlp_hidden_dim=dim*mlp_ratio
        self.mlp_out_dim=dim*1
        self.act_layer=nn.GELU
        # self.mlp_s = MLP(in_features=dim, hidden_features=self.mlp_hidden_dim, out_features=self.mlp_out_dim, act_layer= self.act_layer,
        #                 drop=drop)
        self.mlp_t = MLP(in_features=dim, hidden_features=self.mlp_hidden_dim, out_features=self.mlp_out_dim, act_layer= self.act_layer,
                         drop=drop)
        self.attn_weights = None
    def forward(self, x):
        #src:(b, t, c, f)
        b, t, c, f = x.shape
        x = x + self.drop_path(self.temporal_attn(self.norm1_t(x)))  #residual
        x = x + self.drop_path(self.mlp_t(self.norm2_t(x)))
        return x


######################################  1. Encoder  ##############################################
class CSIEncoder(nn.Module):
    """共享 CNN 作为 CSI 编码器，提取 CSI 特征"""
    def __init__(self, feature_dim=17,dim=256):
        super(CSIEncoder, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(16)
        self.pool1 = nn.MaxPool2d(kernel_size=2)

        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.pool2 = nn.MaxPool2d(kernel_size=(2, 1))

        self.conv3 = nn.Conv2d(32, feature_dim, kernel_size=3, padding=1)  # 输出 64 维特征
        self.bn3 = nn.BatchNorm2d(feature_dim)

        self.fc1 = nn.Linear(28*5, dim)
    def forward(self, x):

        choice=1

        batch_size, num_frames, c, h, w = x.shape  # (B, T, 3, 114, 10)

        # 先合并 batch 和帧数，公用 CNN
        x = x.view(batch_size * num_frames, c, h, w)  # (B*T, 3, 114, 10)

        x = self.pool1(F.leaky_relu(self.bn1(self.conv1(x))))
        x = self.pool2(F.leaky_relu(self.bn2(self.conv2(x))))
        x = F.leaky_relu(self.bn3(self.conv3(x)) ) # (B*T,64, 28,5)

        # 展平成 (batch*num_frames, feature_dim)
        bt,c,h,w=x.shape
        x = x.view(bt, c, -1)  # (B*T,c,28*5)
        x=self.fc1(x)
        #x=self.fc2(x)  #(B*T,17*3)
        x=x.view(batch_size,num_frames,c,-1)   #(B,T,c,256)
        return x


######################################  2. Time ##############################################
class TemporalModel(nn.Module):
    """时序 Transformer 进行 CSI 建模"""

    def __init__(self, Thead=4, Shead=4, channel=17, dim=256, mlp_ratio=4, drop=0.1, drop_path=0., att_fuse=True,
                 maxlen=200):
        super(TemporalModel, self).__init__()

        # 定义时空建模块
        self.TSBlock1 = TSBlock(Thead=Thead, Shead=Shead, channel=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
                                 drop_path=drop_path, att_fuse=att_fuse)
        # self.TSBlock2 = TSBlock(Thead=Thead, Shead=Shead, channel=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
        #                         drop_path=drop_path, att_fuse=att_fuse)
        # self.TSBlock3 = TSBlock(Thead=Thead, Shead=Shead, channel=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
        #                         drop_path=drop_path, att_fuse=att_fuse)
#         self.TSBlock4 = TSBlock(Thead=Thead, Shead=Shead, channel=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
#                                 drop_path=drop_path, att_fuse=att_fuse)

#         self.TSBlock5 = TSBlock(Thead=Thead, Shead=Shead, channel=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
#                                 drop_path=drop_path, att_fuse=att_fuse)
#         self.TSBlock6 = TSBlock(Thead=Thead, Shead=Shead, channel=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
#                                 drop_path=drop_path, att_fuse=att_fuse)
#         self.TSBlock7 = TSBlock(Thead=Thead, Shead=Shead, channel=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
#                                 drop_path=drop_path, att_fuse=att_fuse)
#         self.TSBlock8 = TSBlock(Thead=Thead, Shead=Shead, channel=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
#                                 drop_path=drop_path, att_fuse=att_fuse)
                                
        self.SpeedDecoder=Speedformer(Thead=Thead, Shead=Shead, c=channel, dim=dim, mlp_ratio=mlp_ratio, drop=drop,
                                drop_path=drop_path)
        # 可学习的时间编码和空间编码
        self.temp_embed = nn.Parameter(torch.zeros(1, maxlen, 1, dim))  # 时间编码
        self.pos_embed = nn.Parameter(torch.zeros(1, channel, dim))  # 空间编码

        # 初始化权重
        trunc_normal_(self.temp_embed, std=.02)
        trunc_normal_(self.pos_embed, std=.02)

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, x,alpha=0.5):
        B, F, J, C = x.shape
        # 时间和空间编码加到输入上
        x = x.view(-1, J, C)  # 将输入reshape为 [B*F, C, dim]
        x = x + self.pos_embed  # 加入空间编码
        x = x.view(B,F, J, C)  # 将输入reshape为 [B*F, C, dim]
        # 加入时间编码
        x = x + self.temp_embed[:, :F, :, :]
        # 恢复原始形状
        x = x.view(B, F, J, C)
        # 进行Transformer编码
        x,ts_mid_feature1 = self.TSBlock1(x)  # (B, frame, C, dim)
        # x,ts_mid_feature2 = self.TSBlock2(x)  # (B, frame, C, dim)
        # x,ts_mid_feature3 = self.TSBlock3(x)  # (B, frame, C, dim)
        # x,ts_mid_feature4 = self.TSBlock4(x)  # (B, frame, C, dim)
        # x,ts_mid_feature5 = self.TSBlock1(x)  # (B, frame, C, dim)
        # x,ts_mid_feature6 = self.TSBlock2(x)  # (B, frame, C, dim)
        # x,ts_mid_feature7 = self.TSBlock3(x)  # (B, frame, C, dim)
        # x,ts_mid_feature8 = self.TSBlock4(x)  # (B, frame, C, dim)
        #ts_mid_feature=ts_mid_feature1+ts_mid_feature2+ts_mid_feature3
        ts_mid_feature=ts_mid_feature1
        speed_feature=self.SpeedDecoder(ts_mid_feature)
        x=x+alpha*speed_feature
        return x,speed_feature

######################################  3. Dncoder  ##############################################

class KPDecoder(nn.Module):
    """时序 Transformer 进行 CSI 建模"""
    def __init__(self, channel=17,dim=256):
        super(KPDecoder, self).__init__()
        self.fc1 = nn.Linear(channel*dim, 256)
        self.fc2 = nn.Linear(256, 17 * 3)
    def forward(self, x):
        batch_size, num_frames, C,F = x.shape
        x=x.view(batch_size,num_frames,-1)  #(B,F,C*dim)
        x=self.fc1(x)
        x = self.fc2(x)  #(B,F,17*3)
        x=x.view(batch_size, num_frames, 17,3)
        return x
class SpeedDecoder(nn.Module):
    """时序 Transformer 进行 CSI 建模"""
    def __init__(self, channel=17,dim=256):
        super(SpeedDecoder, self).__init__()
        self.fc1 = nn.Linear(channel*dim, 256)
        self.fc2 = nn.Linear(256, 17 * 3)
    def forward(self, x):
        batch_size, num_frames, C,F = x.shape
        x=x[:,-1] ##(B,1,C*dim)
        x=x.view(batch_size,-1)  #(B,C*dim)
        x=self.fc1(x)
        x = self.fc2(x)  #(B,17*3)
        x=x.view(batch_size, 17,3)
        return x


######################################  4. Total ##############################################
class CSIToKeypointModel(nn.Module):
    """完整模型：共享 CNN 作为 Encoder，Transformer 进行时空建模"""
    def __init__(self,num_frames=10,encoder_out_channel=17,dim=128):
        super(CSIToKeypointModel, self).__init__()
        self.num_frames=num_frames
        self.encoder_out_channel = encoder_out_channel
        self.encoder = CSIEncoder(feature_dim= self.encoder_out_channel,dim=dim)
        self.temporal_model = TemporalModel(Thead=4, Shead=4, channel=encoder_out_channel, dim=dim, mlp_ratio=1, drop=0.3, drop_path=0., att_fuse=True,maxlen=200)  #token_length=10*16
        self.Decoder=KPDecoder(channel=encoder_out_channel,dim=dim)
        self.SpeedDecoder = SpeedDecoder(channel=encoder_out_channel, dim=dim)
    def forward(self, x):
        batch_size, num_frames, c, h, w = x.shape  # (B, T, 3, 114, 10)
        if num_frames!=self.num_frames:
            print('重新调整时间长度，长度不一致')
            return ValueError
        x = self.encoder(x)  # 如果是choice1：时间*通道  # (B，T*c, 14*5) T=10，c=16
        x,speed = self.temporal_model(x,alpha=0.5)  # 进行时序建模 (B, T*c, 14*5)  x=x+alpha*speed_feature
        x=self.Decoder(x)
        speed=self.SpeedDecoder(speed)
        return x,speed


if __name__ == '__main__':
    # 4 个 batch，每个 batch 有 10 帧 CSI 数据
    csi = torch.randn(4, 10, 3, 114, 10)
    batch_size, num_frames, c, h, w = csi.shape  # (B, T, 3, 114, 10)
    model = CSIToKeypointModel(num_frames=num_frames)
    keypoints,speed = model(csi)
    print(keypoints.shape)  # (4, 10, 17, 3)
    print(speed.shape)  # (4, 10, 17, 3)
